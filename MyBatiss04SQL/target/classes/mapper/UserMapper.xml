<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace务必和接口的全类名一样 -->
<mapper namespace="com.mmm.dao.UserDao"><!--必须是对应的dao接口的全类名-->
    <!-- id务必和接口中的方法名称对应
        如果参数是一个对象，那么sql语句中#{对象的属性名}就可以获取值
        在核心中${}获取
        因为在核心文件中配置了别名，所以这块的类名不用写完整限定名
        如果没有在核心文件中配置别名，必须是完整限定名，除了java.lang包下的
     -->
    <insert id="addStudent" parameterType="User">
--       数据库关键字是name  name要加上`name`   不然增加不了
      insert into User(age,`name`) values(#{age},#{name})
    </insert>

    <!--
        新增操作 会获取我们插入数据的id
        SELECT @@identity
        SELECT LAST_INSERT_ID()   查询刚拆入数据的主键
    -->
    <insert id="addID" parameterType="User">
        INSERT INTO USER (age,`name`) VALUES (#{age},#{name})
        /**
        order="AFTER"  适用于mysql数据库
        order="BEFORE"  适用于oracle数据库
        */
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            SELECT @@IDENTITY
        </selectKey>
    </insert>
    <!--删除操作-->
    <delete id="deleteUser" parameterType="int">
        /*xx是占位符*/
        DELETE FROM user WHERE id=#{xx}
    </delete>

    <!--修改操作   传递的是一个user对象-->
    <update id="updateUser" parameterType="User">
        UPDATE USER SET name =#{name },age=#{age}
        WHERE id=#{id}
    </update>

    <!--查询所有-->
    <select id="UserALL" resultType="User">

        SELECT * FROM user
    </select>

    <!--查询所有用map-->
    <select id="userAllMap" resultMap="UserMap">
        SELECT * from user
    </select>
    <!--
        数据库字段名和我们实体类属性名不一致  必须使用
        返回结果是map集合时  必须使用
        关键映射  以及延迟加载  必须使用
    -->
    <resultMap id="UserMap" type="User">
        <!-- property 是我们自己定义的实体类名  column 是数据库列名  这样就可以映射过去  -->
        <id property="id" column="id"/> <!--只针对主键的设置-->
        <result property="age" column="age"/> <!--设置除了主键，集合，对象之外的属性-->
        <result property="name" column="name"/>
    </resultMap>


    <!--
        使用别名的方式
    `names``ages`数据库的名字
    name age实体类的名字

    <select id="userAllMap" resultType="User">
        SELECT `ids` as id,`names`as name,`ages` as age FROM user
    </select>
    -->

    <!--根据指定id查询-->
    <select id="UserById" parameterType="int" resultType="User">
        select * FROM user WHERE id=#{xxx}
    </select>

    <!--根据学生name模糊查询-->
    <!--
        SELECT * FROM user WHERE `name` like '%' #{value} '%'
    -->
    <select id="userByname" resultType="User">
        SELECT * FROM user WHERE `name` LIKE  concat('%',#{xxx},'%')
    </select>

    <!-- 用map进行多表条件的查询-->

    <select id="userByMap" resultType="User">


       SELECT a.name,a.id,a.age FROM user a,nuser b,Muser c
       WHERE a.Nid=b.Nid AND a.`Mid`=c.Mid
       AND a.name=#{name}
       AND a.age=#{age}


    </select>

    <select id="userByMap2" resultType="User">
       SELECT a.name,a.id,a.age FROM user a,nuser b,Muser c
       WHERE a.Nid=b.Nid AND a.`Mid`=c.Mid
       AND a.name=#{0}
       AND b.Nname=#{1}
       AND c.Mname=#{2}
    </select>

    <select id="userByMap3" resultType="User">
        SELECT `name`,id,age FROM user
        WHERE `name`=#{name}
        AND  id=#{id}

    </select>

    <!--用户传递一个User对象，  但是我们不知道用户对那些属性赋了值
    注意点  特殊字符的使用
    && (逻辑与)  必须换成 （and） 或者（&amp）
    where 1=1 每次拼接查询都会  hiding 影响性能
    -->

    <select id="userByIf" resultType="User">

        SELECT  * FROM USER  where 1=1
        <if test="name!=null and name!=''">
            AND  name like concat('%',#{name},'%')
        </if>

        <if test="age &gt;0">
            and age=#{age}

        </if>
    </select>


    <!--where标签 替换 where 1=1  -->

    <select id="userByWhere" resultType="User">

        SELECT * from "user"
        <where>
            <if test="name!=null and name!=''">
                and `name` like concat('%',#{name},'%')


            </if>

            <if test="age &gt;0">

                and age =#{age}


            </if>

        </where>




    </select>
    <!--
        choose标签  类似于java中的seitch
        01.当我们的年龄 不为空 按照年龄
        02.当我们的姓名不为空 按照姓名查询
        03.如果都会空  执行otherwise  如果没有 otherwise标签 会查询所有
        04.如果多个条件满足 ，执行第一个满足when

        如果条件只允许执行一个 就是choose
            因为值执行一个sql 所有不需要加and
            想多个条件执行 使用if
             因为有多个sql需要拼接 所有 不能省略 and  在mybatis中 底层不会给我们生成and

    -->
    <select id="userByChoose" resultType="User">
        SELECT * FROM USER
        <where>
            <choose>
                <when test="name!=null and name!=''">
                    `name` like concat('%',#{name},'%')
                </when>

                <when test="age  &gt;0 ">
                     and age=#{age}
                </when>

                <otherwise>
                    1!=1
                </otherwise>
            </choose>
        </where>
    </select>

    <!--
        我们之前在mysql中查询的语句
    SELECT  id,NAME,age FROM student   WHERE id IN (12,13,14)
    01.我们知道用户输入的是12，13,14,吗？？？
    02.12，13,14是动态获取的  是dao中方法的参数 int [] nums
    03.nums的每个元素 就是  12,13,14
    04.用户是不是有可能一个值都没有传入
    05.只要是数组    在mybatis对应的值就是array

    -->

    <select id="userByforeachArray" resultType="User">
        SELECT * from USER
        <if test="array.length>0">
            WHERE id IN

            <foreach collection="array" item="varId" open="(" separator="," close=")">
            #{varId}
             </foreach>
        </if>

    </select>

    <select id="userByforeachList" resultType="User">

        SELECT * FROM USER
        <if test="list.size>0">
            WHERE id IN
            <foreach collection="list" item="varId" open="(" separator="," close=")">
                #{varId}
            </foreach>
        </if>


    </select>

    <!--遍历 User集合-->
    <select id="userByForeachuser" resultType="User">
        SELECT * FROM USER
        <if test="list.size>0">
            WHERE id IN
            <foreach collection="list" item="stu" open="(" separator="," close=")">
                #{stu.id}
            </foreach>
        </if>
    </select>

    <!--
        遍历map集合  map集合在mybatis中没有设置对应的值
        mymap就是我们到层方法的@Param("myMap")
        遍历myMap.keys 就是获取map集合中的所有key集合
    -->
    <select id="userByForeachMap" resultType="User">
        <include refid="sqlseeteUsers"/>  -- sql片段  mapper公共部分   ：SELECT * FROM USER
          WHERE id IN
        <if test="myMap.keys.size>0">
            <foreach collection="myMap.keys" item="mapKey" open="(" separator= "," close=")">
                #{mapKey}
            </foreach>
        </if>


    </select>

    <!--SQL片段  ：提取mapper文件中所有sql公共部分-->
    <sql id="sqlseeteUsers">
        SELECT * FROM USER
    </sql>


</mapper>